##########################
# Django 4 using pip
##########################
# Container configuration.

#   The name of this app. Must be unique within a project.
name: 'app'

#   The runtime the application uses.
type: 'python:3.10'

##########################
# Builds and variables

# UNCOMMENT WHEN USING PIPENV
# The build-time dependencies of the app. Uncomment if using Pipenv.
# dependencies:
#     python3:
#        pipenv: '2022.9.4'

# UNCOMMENT WHEN USING POETRY
# Build-time visible variables. Uncomment if using Poetry.
variables:
    env:
        POETRY_VERSION: '1.1.14'
        POETRY_VIRTUALENVS_IN_PROJECT: true
        POETRY_VIRTUALENVS_CREATE: false

hooks:
    build: |
        set -eu

        # # 1) PIP
        # # - Download the latest version of pip
        # python3.10 -m pip install --upgrade pip
        # # - Install dependencies
        # pip install -r requirements.txt

        # # 2) PIPENV (be sure to uncomment the dependencies.build.python3 block above as well)
        # # - Download the latest version of pip
        # python3.10 -m pip install --upgrade pip
        # # - Install dependencies
        # pipenv install --system --deploy

        # 3) POETRY (be sure to uncomment the variables.env block above as well)
        # - Download the latest version of pip
        python3.10 -m pip install --upgrade pip
        # - Install and configure Poetry
        export PIP_USER=false
        curl -sSL https://install.python-poetry.org | python3 - --version $POETRY_VERSION
        export PATH="/app/.local/bin:$PATH"
        export PIP_USER=true
        # - Install dependencies
        poetry install
        # - Collect static assets
        poetry run python manage.py collectstatic

        # mkdir logs
        # python manage.py collectstatic
        # rm -rf logs
    deploy: poetry run python manage.py migrate

##########################
# Web configuration

# The configuration of the application when it is exposed to the web.
web:
    upstream:
        socket_family: unix
    commands:
        start: "poetry run gunicorn -w 4 -b unix:$SOCKET myapp.wsgi:application"
    locations:
        "/":
            passthru: true
        "/static":
            root: "static"
            expires: 1h
            allow: true

##########################
# Services

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "db:postgresql"

##########################
# Data and mounts

# The size of the persistent disk of the application (in MB).
disk: 512

# Set a local R/W mount for logs
mounts:
    'logs':
        source: local
        source_path: logs

##########################
# Internal maintenance

source:
    operations:
        auto-update:
            command: |
              curl -fsS https://raw.githubusercontent.com/platformsh/source-operations/main/setup.sh | { bash /dev/fd/3 sop-autoupdate; } 3<&0
